{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/task-management-dashboard/src/components/styles.ts"],"sourcesContent":["const styles = {\r\n    formBox: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '16px',\r\n        marginTop: '16px',\r\n        backgroundColor: 'background.paper',\r\n        padding: '24px',\r\n        borderRadius: '8px',\r\n        boxShadow: 24,\r\n        width: '400px',\r\n    }, \r\n}\r\n\r\nexport default styles;"],"names":[],"mappings":";;;AAAA,MAAM,SAAS;IACX,SAAS;QACL,SAAS;QACT,eAAe;QACf,KAAK;QACL,WAAW;QACX,iBAAiB;QACjB,SAAS;QACT,cAAc;QACd,WAAW;QACX,OAAO;IACX;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/task-management-dashboard/src/components/modal/addTaskModal.tsx"],"sourcesContent":["import { Box, Button, MenuItem, Modal, Select, TextField, Typography } from \"@mui/material\";\r\nimport styles from \"../styles\";\r\n\r\ntype AddTaskModalProps = {\r\n    openAddTaskModal: boolean,\r\n    setOpenAddTaskModal: (open: boolean) => void,\r\n    newTask: {\r\n        title: string,\r\n        description: string,\r\n        status: string,\r\n        priority: string,\r\n        dueDate: string,\r\n        tags: string,\r\n    },\r\n    setNewTask: (task: {\r\n        title: string,\r\n        description: string,\r\n        status: string,\r\n        priority: string,\r\n        dueDate: string,\r\n        tags: string,\r\n    }) => void,\r\n    handleSubmit: (e: React.FormEvent) => void,\r\n}\r\n\r\nexport default function AddTaskModal({ openAddTaskModal, setOpenAddTaskModal, newTask, setNewTask, handleSubmit }: AddTaskModalProps) {\r\n    return (\r\n        <Modal\r\n            open={openAddTaskModal}\r\n            onClose={() => setOpenAddTaskModal(!openAddTaskModal)}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n        >\r\n            <Box\r\n                component=\"form\"\r\n                onSubmit={handleSubmit}\r\n                sx={styles.formBox}\r\n            >\r\n                <TextField\r\n                    label=\"Task title\"\r\n                    name=\"title\"\r\n                    value={newTask.title}\r\n                    onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\r\n                    fullWidth\r\n                    required\r\n                />\r\n                <TextField\r\n                    label=\"Describe your task\"\r\n                    name=\"description\"\r\n                    value={newTask.description}\r\n                    onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\r\n                    fullWidth\r\n                    required\r\n                />\r\n                <TextField\r\n                    label=\"Due date\"\r\n                    name=\"dueDate\"\r\n                    value={newTask.dueDate}\r\n                    onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}\r\n                    fullWidth\r\n                    required\r\n                    type=\"date\"\r\n                />\r\n                <Select\r\n                    labelId=\"role-label\"\r\n                    id=\"role\"\r\n                    value={newTask.priority}\r\n                    label=\"Select Priority\"\r\n                    onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}\r\n                >\r\n                    <MenuItem value=\"low\">Low</MenuItem>\r\n                    <MenuItem value=\"medium\">Medium</MenuItem>\r\n                    <MenuItem value=\"high\">High</MenuItem>\r\n                </Select>\r\n                <Select\r\n                    labelId=\"role-label\"\r\n                    id=\"role\"\r\n                    value={newTask.status}\r\n                    label=\"Select Status\"\r\n                    onChange={(e) => setNewTask({ ...newTask, status: e.target.value })}\r\n                >\r\n                    <MenuItem value=\"todo\">Todo</MenuItem>\r\n                    <MenuItem value=\"in_progress\">In-Progress</MenuItem>\r\n                    <MenuItem value=\"done\">Done</MenuItem>\r\n                </Select>\r\n                <Select\r\n                    labelId=\"role-label\"\r\n                    id=\"tags\"\r\n                    value={newTask.tags}\r\n                    label=\"Select Tags/Label\"\r\n                    onChange={(e) => setNewTask({ ...newTask, tags: e.target.value })}\r\n                >\r\n                    <MenuItem value=\"feature\">Feature</MenuItem>\r\n                    <MenuItem value=\"enhancement\">Enhancement</MenuItem>\r\n                    <MenuItem value=\"bug\">Bug</MenuItem>\r\n                </Select>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Add New Task\r\n                </Button>\r\n            </Box>\r\n        </Modal>\r\n    )\r\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAwBe,SAAS,aAAa,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAqB;IAChI,qBACI,qKAAC,uLAAA,CAAA,QAAK;QACF,MAAM;QACN,SAAS,IAAM,oBAAoB,CAAC;QACpC,mBAAgB;QAChB,oBAAiB;kBAEjB,cAAA,qKAAC,iLAAA,CAAA,MAAG;YACA,WAAU;YACV,UAAU;YACV,IAAI,oHAAA,CAAA,UAAM,CAAC,OAAO;;8BAElB,qKAAC,mMAAA,CAAA,YAAS;oBACN,OAAM;oBACN,MAAK;oBACL,OAAO,QAAQ,KAAK;oBACpB,UAAU,CAAC,IAAM,WAAW;4BAAE,GAAG,OAAO;4BAAE,OAAO,EAAE,MAAM,CAAC,KAAK;wBAAC;oBAChE,SAAS;oBACT,QAAQ;;;;;;8BAEZ,qKAAC,mMAAA,CAAA,YAAS;oBACN,OAAM;oBACN,MAAK;oBACL,OAAO,QAAQ,WAAW;oBAC1B,UAAU,CAAC,IAAM,WAAW;4BAAE,GAAG,OAAO;4BAAE,aAAa,EAAE,MAAM,CAAC,KAAK;wBAAC;oBACtE,SAAS;oBACT,QAAQ;;;;;;8BAEZ,qKAAC,mMAAA,CAAA,YAAS;oBACN,OAAM;oBACN,MAAK;oBACL,OAAO,QAAQ,OAAO;oBACtB,UAAU,CAAC,IAAM,WAAW;4BAAE,GAAG,OAAO;4BAAE,SAAS,EAAE,MAAM,CAAC,KAAK;wBAAC;oBAClE,SAAS;oBACT,QAAQ;oBACR,MAAK;;;;;;8BAET,qKAAC,0LAAA,CAAA,SAAM;oBACH,SAAQ;oBACR,IAAG;oBACH,OAAO,QAAQ,QAAQ;oBACvB,OAAM;oBACN,UAAU,CAAC,IAAM,WAAW;4BAAE,GAAG,OAAO;4BAAE,UAAU,EAAE,MAAM,CAAC,KAAK;wBAAC;;sCAEnE,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAM;;;;;;sCACtB,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAS;;;;;;sCACzB,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAO;;;;;;;;;;;;8BAE3B,qKAAC,0LAAA,CAAA,SAAM;oBACH,SAAQ;oBACR,IAAG;oBACH,OAAO,QAAQ,MAAM;oBACrB,OAAM;oBACN,UAAU,CAAC,IAAM,WAAW;4BAAE,GAAG,OAAO;4BAAE,QAAQ,EAAE,MAAM,CAAC,KAAK;wBAAC;;sCAEjE,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAO;;;;;;sCACvB,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAc;;;;;;sCAC9B,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAO;;;;;;;;;;;;8BAE3B,qKAAC,0LAAA,CAAA,SAAM;oBACH,SAAQ;oBACR,IAAG;oBACH,OAAO,QAAQ,IAAI;oBACnB,OAAM;oBACN,UAAU,CAAC,IAAM,WAAW;4BAAE,GAAG,OAAO;4BAAE,MAAM,EAAE,MAAM,CAAC,KAAK;wBAAC;;sCAE/D,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAU;;;;;;sCAC1B,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAc;;;;;;sCAC9B,qKAAC,gMAAA,CAAA,WAAQ;4BAAC,OAAM;sCAAM;;;;;;;;;;;;8BAE1B,qKAAC,0LAAA,CAAA,SAAM;oBAAC,MAAK;oBAAS,SAAQ;oBAAY,OAAM;8BAAU;;;;;;;;;;;;;;;;;AAM1E","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/task-management-dashboard/src/components/TodoAppMainPage.tsx"],"sourcesContent":["import { Props, Task } from \"@/pages\";\r\nimport { Box, Button, Checkbox, List, ListItem, ListItemText, MenuItem, Modal, Paper, Select, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TableSortLabel, TextField, Typography } from \"@mui/material\";\r\nimport { useMemo, useState } from \"react\";\r\nimport AddTaskModal from \"./modal/addTaskModal\";\r\n\r\ninterface Data {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  status: string;\r\n  priority: string;\r\n  tags: string;\r\n  dueDate: Date;\r\n  createdAt: Date;\r\n}\r\ntype Order = 'asc' | 'desc';\r\n\r\ninterface EnhancedTableProps {\r\n  numSelected: number;\r\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order;\r\n  orderBy: string;\r\n  rowCount: number;\r\n}\r\n\r\ninterface HeadCell {\r\n  disablePadding: boolean;\r\n  id: keyof Data;\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst headCells: readonly HeadCell[] = [\r\n    {\r\n        id: 'title',\r\n        numeric: false,\r\n        disablePadding: true,\r\n        label: 'Task title',\r\n    },\r\n    {\r\n        id: 'description',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Description',\r\n    },\r\n    {\r\n        id: 'status',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Status',\r\n    },\r\n    {\r\n        id: 'priority',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Priority',\r\n    },\r\n    {\r\n        id: 'tags',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Tags/Labels',\r\n    },\r\n    {\r\n        id: 'dueDate',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Due Date',\r\n    },\r\n    {\r\n        id: 'createdAt',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Creation Date',\r\n    }\r\n];\r\n\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n    const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                    color=\"primary\"\r\n                    indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                    checked={rowCount > 0 && numSelected === rowCount}\r\n                    onChange={onSelectAllClick}\r\n                    // inputProps={{\r\n                    //     'aria-label': 'select all desserts',\r\n                    // }}\r\n                />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                        {headCell.label}\r\n                        {/* {orderBy === headCell.id ? (\r\n                            <Box component=\"span\" sx={{}}>\r\n                            {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                            </Box>\r\n                        ) : null} */}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n  order: Order,\r\n  orderBy: Key,\r\n): (\r\n  a: { [key in Key]: number | string },\r\n  b: { [key in Key]: number | string },\r\n) => number {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nexport default function TodoAppMainPage({task: initialTasks}: Props) {\r\n    const [tasks, setTasks] = useState<Task[]>(initialTasks)\r\n    const [newTask, setNewTask] = useState({\r\n        title: '',\r\n        description: '',\r\n        status: '',\r\n        priority: '',\r\n        dueDate: '',\r\n        tags: '',\r\n    });\r\n    const [editingId, setEditingId] = useState<number | null>(null);\r\n    const [editedTaskName, setEditedTaskName] = useState('');\r\n    const [openAddTaskModal, setOpenAddTaskModal] = useState(false);\r\n    const [selected, setSelected] = useState<readonly number[]>([]);\r\n    const [order, setOrder] = useState<Order>('asc');\r\n    const [orderBy, setOrderBy] = useState<keyof Data>('status');\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [page, setPage] = useState(0);\r\n\r\n    const handleRequestSort = (\r\n        event: React.MouseEvent<unknown>,\r\n        property: keyof Data,\r\n    ) => {\r\n        const noSortHeaders = ['title', 'description', 'tags', 'dueDate']\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        \r\n        if(!noSortHeaders.includes(property)){\r\n            setOrderBy(property);\r\n        }\r\n    };\r\n\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        console.log('newTask', newTask)\r\n        try {\r\n            const res = await fetch('/api/addTask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": 'application/json'\r\n                },\r\n                body: JSON.stringify({ \r\n                    title: newTask.title, \r\n                    description: newTask.description, \r\n                    status: newTask.status.toUpperCase(), \r\n                    priority: newTask.priority.toUpperCase(), \r\n                    dueDate: newTask.dueDate,\r\n                    tags: newTask.tags.toUpperCase()\r\n                })\r\n            })\r\n\r\n            if(res.ok) {\r\n                const newTasks = await fetch('/api/task').then(r => r.json());\r\n                setTasks(newTasks);\r\n                setNewTask({ \r\n                    title: '', \r\n                    description: '', \r\n                    dueDate: '',\r\n                    status: '',\r\n                    priority: '',\r\n                    tags: '',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error in adding task: ${err}`)\r\n        }\r\n    }\r\n\r\n    const handleDone = async(id: number) => {\r\n        try {\r\n            const res = await fetch('/api/removeTask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": 'application/json'\r\n                },\r\n                body: JSON.stringify({ id })\r\n            })\r\n\r\n            if(res.ok) {\r\n                const newTasks = await fetch('/api/task').then(r => r.json());\r\n                setTasks(newTasks);\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error in removing task: ${err}`)\r\n        }\r\n    }\r\n    \r\n    const handleEdit = (id: number) => {\r\n        const taskToEdit = tasks.find((task) => task.id === id);\r\n        if(taskToEdit) {\r\n            setEditingId(id);\r\n            setEditedTaskName(taskToEdit.name)\r\n        }\r\n    }\r\n\r\n    const handleSaveEdit = async (id: number) => {\r\n        try {\r\n            const res = await fetch('/api/editTask', {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ id, name: editedTaskName })\r\n            })\r\n\r\n            if(res.ok) {\r\n                const newTasks = await fetch('/api/task').then(r => r.json());\r\n                setTasks(newTasks);\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error in updating task: ${err}`)\r\n        }\r\n        \r\n        setEditingId(null);\r\n        setEditedTaskName('');\r\n    }\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    }\r\n\r\n    const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.checked) {\r\n        const newSelected = tasks.map((n) => n.id);\r\n        setSelected(newSelected);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event: React.MouseEvent<unknown>, id: number) => {\r\n        const selectedIndex = selected.indexOf(id);\r\n        let newSelected: readonly number[] = [];\r\n\r\n        if (selectedIndex === -1) {\r\n        newSelected = newSelected.concat(selected, id);\r\n        } else if (selectedIndex === 0) {\r\n        newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n        newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n        newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1),\r\n        );\r\n        }\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const visibleRows = useMemo(\r\n        () =>\r\n        [...tasks]\r\n            .sort(getComparator(order, orderBy))\r\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage),\r\n        [order, orderBy, page, rowsPerPage],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Typography variant=\"h3\"> Tasks: </Typography>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    onClick={() => setOpenAddTaskModal(!openAddTaskModal)}\r\n                >\r\n                    Add Task\r\n                </Button>\r\n                <AddTaskModal\r\n                    openAddTaskModal={openAddTaskModal} \r\n                    setOpenAddTaskModal={setOpenAddTaskModal}\r\n                    newTask={newTask} \r\n                    setNewTask={setNewTask} \r\n                    handleSubmit={handleSubmit}\r\n                />\r\n            </div>\r\n            <Paper sx={{ marginTop: 2, padding: 2 }}>\r\n                <TableContainer>\r\n                    <Table\r\n                        sx={{ minWidth: 750 }}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={'small'}\r\n                    >\r\n                        <EnhancedTableHead\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={5}\r\n                        />\r\n                        <TableBody>\r\n                            {visibleRows.map((task, id) => {\r\n                                const isItemSelected = selected.includes(task.id)\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        onClick={(event) => handleClick(event, task.id)}\r\n                                        role=\"checkbox\"\r\n                                        aria-checked={isItemSelected}\r\n                                        tabIndex={-1}\r\n                                        key={id}\r\n                                        selected={isItemSelected}\r\n                                        sx={{ cursor: 'pointer' }}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                                color=\"primary\"\r\n                                                checked={isItemSelected}\r\n                                                // inputProps={{\r\n                                                // 'aria-labelledby': labelId,\r\n                                                // }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            id={task.title}\r\n                                            scope=\"row\"\r\n                                            padding=\"none\"\r\n                                        >\r\n                                            {task.title}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{task.description}</TableCell>\r\n                                        <TableCell align=\"left\">{task.status}</TableCell>\r\n                                        <TableCell align=\"left\">{task.priority}</TableCell>\r\n                                        <TableCell align=\"left\">{task.tags}</TableCell>\r\n                                        <TableCell align=\"left\">{task.dueDate}</TableCell>\r\n                                        <TableCell align=\"left\">{task.createdAt}</TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={tasks.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            {/* <List>\r\n                {tasks.map((ta) => \r\n                    ta.id === editingId ? \r\n                    (\r\n                        <li key={ta.id}>\r\n                            <input\r\n                                value={editedTaskName}\r\n                                type=\"text\"\r\n                                onChange={(e) => setEditedTaskName(e.target.value)}\r\n                            />\r\n                            <button onClick={() => handleSaveEdit(ta.id)}>Save</button>\r\n                            <button onClick={() =>  setEditingId(null)}>Cancel</button>\r\n                        </li>\r\n                    )\r\n                    :\r\n                    (\r\n                        <ListItem key={ta.id} sx={{}}>\r\n                            <ListItemText primary={ta.title}/>\r\n                            <ListItemText primary={ta.description}/>\r\n                            <ListItemText primary={ta.status}/>\r\n                            <ListItemText primary={ta.priority}/>\r\n                            <button onClick={() => handleDone(ta.id)}>Done</button>\r\n                            <button onClick={() => handleEdit(ta.id)}>Edit</button>\r\n                        </ListItem>\r\n                    )\r\n                )}\r\n            </List> */}\r\n        </>\r\n    )\r\n}"],"names":[],"mappings":";;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AA8BA,MAAM,YAAiC;IACnC;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;IACA;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;IACA;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;IACA;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;IACA;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;IACA;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;IACA;QACI,IAAI;QACJ,SAAS;QACT,gBAAgB;QAChB,OAAO;IACX;CACH;AAGD,SAAS,kBAAkB,KAAyB;IAChD,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG;IACnF,MAAM,oBAAoB,CAAC,WAAyB,CAAC;YACjD,cAAc,OAAO;QACzB;IAEA,qBACI,qKAAC,mMAAA,CAAA,YAAS;kBACN,cAAA,qKAAC,gMAAA,CAAA,WAAQ;;8BACL,qKAAC,mMAAA,CAAA,YAAS;oBAAC,SAAQ;8BACnB,cAAA,qKAAC,gMAAA,CAAA,WAAQ;wBACL,OAAM;wBACN,eAAe,cAAc,KAAK,cAAc;wBAChD,SAAS,WAAW,KAAK,gBAAgB;wBACzC,UAAU;;;;;;;;;;;gBAMb,UAAU,GAAG,CAAC,CAAC,yBACZ,qKAAC,mMAAA,CAAA,YAAS;wBAEN,OAAO;wBACP,SAAS,SAAS,cAAc,GAAG,SAAS;wBAC5C,eAAe,YAAY,SAAS,EAAE,GAAG,QAAQ;kCAEjD,cAAA,qKAAC,kNAAA,CAAA,iBAAc;4BACX,QAAQ,YAAY,SAAS,EAAE;4BAC/B,WAAW,YAAY,SAAS,EAAE,GAAG,QAAQ;4BAC7C,SAAS,kBAAkB,SAAS,EAAE;sCAEzC,SAAS,KAAK;;;;;;uBAVV,SAAS,EAAE;;;;;;;;;;;;;;;;AAsBxC;AAEA,SAAS,qBAAwB,CAAI,EAAE,CAAI,EAAE,OAAgB;IAC3D,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE;QAC3B,OAAO,CAAC;IACV;IACA,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE;QAC3B,OAAO;IACT;IACA,OAAO;AACT;AAEA,SAAS,cACP,KAAY,EACZ,OAAY;IAKZ,OAAO,UAAU,SACb,CAAC,GAAG,IAAM,qBAAqB,GAAG,GAAG,WACrC,CAAC,GAAG,IAAM,CAAC,qBAAqB,GAAG,GAAG;AAC5C;AAEe,SAAS,gBAAgB,EAAC,MAAM,YAAY,EAAQ;IAC/D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;QACnC,OAAO;QACP,aAAa;QACb,QAAQ;QACR,UAAU;QACV,SAAS;QACT,MAAM;IACV;IACA,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB;IAC1D,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACzD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAqB,EAAE;IAC9D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAS;IAC1C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAc;IACnD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAEjC,MAAM,oBAAoB,CACtB,OACA;QAEA,MAAM,gBAAgB;YAAC;YAAS;YAAe;YAAQ;SAAU;QACjE,MAAM,QAAQ,YAAY,YAAY,UAAU;QAChD,SAAS,QAAQ,SAAS;QAE1B,IAAG,CAAC,cAAc,QAAQ,CAAC,WAAU;YACjC,WAAW;QACf;IACJ;IAGA,MAAM,eAAe,OAAO;QACxB,EAAE,cAAc;QAChB,QAAQ,GAAG,CAAC,WAAW;QACvB,IAAI;YACA,MAAM,MAAM,MAAM,MAAM,gBAAgB;gBACpC,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACjB,OAAO,QAAQ,KAAK;oBACpB,aAAa,QAAQ,WAAW;oBAChC,QAAQ,QAAQ,MAAM,CAAC,WAAW;oBAClC,UAAU,QAAQ,QAAQ,CAAC,WAAW;oBACtC,SAAS,QAAQ,OAAO;oBACxB,MAAM,QAAQ,IAAI,CAAC,WAAW;gBAClC;YACJ;YAEA,IAAG,IAAI,EAAE,EAAE;gBACP,MAAM,WAAW,MAAM,MAAM,aAAa,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI;gBAC1D,SAAS;gBACT,WAAW;oBACP,OAAO;oBACP,aAAa;oBACb,SAAS;oBACT,QAAQ;oBACR,UAAU;oBACV,MAAM;gBACV;YACJ;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,KAAK;QAChD;IACJ;IAEA,MAAM,aAAa,OAAM;QACrB,IAAI;YACA,MAAM,MAAM,MAAM,MAAM,mBAAmB;gBACvC,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAG;YAC9B;YAEA,IAAG,IAAI,EAAE,EAAE;gBACP,MAAM,WAAW,MAAM,MAAM,aAAa,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI;gBAC1D,SAAS;YACb;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,CAAC,wBAAwB,EAAE,KAAK;QAClD;IACJ;IAEA,MAAM,aAAa,CAAC;QAChB,MAAM,aAAa,MAAM,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QACpD,IAAG,YAAY;YACX,aAAa;YACb,kBAAkB,WAAW,IAAI;QACrC;IACJ;IAEA,MAAM,iBAAiB,OAAO;QAC1B,IAAI;YACA,MAAM,MAAM,MAAM,MAAM,iBAAiB;gBACrC,QAAQ;gBACR,SAAS;oBACL,gBAAgB;gBACpB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;oBAAI,MAAM;gBAAe;YACpD;YAEA,IAAG,IAAI,EAAE,EAAE;gBACP,MAAM,WAAW,MAAM,MAAM,aAAa,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI;gBAC1D,SAAS;YACb;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC,CAAC,wBAAwB,EAAE,KAAK;QAClD;QAEA,aAAa;QACb,kBAAkB;IACtB;IAEA,MAAM,mBAAmB,CAAC,OAAgB;QACtC,QAAQ;IACZ;IAEA,MAAM,0BAA0B,CAAC;QAC7B,eAAe,SAAS,MAAM,MAAM,CAAC,KAAK,EAAE;QAC5C,QAAQ;IACZ;IAEA,MAAM,uBAAuB,CAAC;QAC1B,IAAI,MAAM,MAAM,CAAC,OAAO,EAAE;YAC1B,MAAM,cAAc,MAAM,GAAG,CAAC,CAAC,IAAM,EAAE,EAAE;YACzC,YAAY;YACR;QACJ;QACA,YAAY,EAAE;IAClB;IAEA,MAAM,cAAc,CAAC,OAAkC;QACnD,MAAM,gBAAgB,SAAS,OAAO,CAAC;QACvC,IAAI,cAAiC,EAAE;QAEvC,IAAI,kBAAkB,CAAC,GAAG;YAC1B,cAAc,YAAY,MAAM,CAAC,UAAU;QAC3C,OAAO,IAAI,kBAAkB,GAAG;YAChC,cAAc,YAAY,MAAM,CAAC,SAAS,KAAK,CAAC;QAChD,OAAO,IAAI,kBAAkB,SAAS,MAAM,GAAG,GAAG;YAClD,cAAc,YAAY,MAAM,CAAC,SAAS,KAAK,CAAC,GAAG,CAAC;QACpD,OAAO,IAAI,gBAAgB,GAAG;YAC9B,cAAc,YAAY,MAAM,CAC5B,SAAS,KAAK,CAAC,GAAG,gBAClB,SAAS,KAAK,CAAC,gBAAgB;QAEnC;QACA,YAAY;IAChB;IAEA,MAAM,cAAc,CAAA,GAAA,mGAAA,CAAA,UAAO,AAAD,EACtB,IACA;eAAI;SAAM,CACL,IAAI,CAAC,cAAc,OAAO,UAC1B,KAAK,CAAC,OAAO,aAAa,OAAO,cAAc,cACpD;QAAC;QAAO;QAAS;QAAM;KAAY;IAGvC,qBACI;;0BACI,qKAAC;;kCACG,qKAAC,sMAAA,CAAA,aAAU;wBAAC,SAAQ;kCAAK;;;;;;kCACzB,qKAAC,0LAAA,CAAA,SAAM;wBACH,SAAQ;wBACR,OAAM;wBACN,SAAS,IAAM,oBAAoB,CAAC;kCACvC;;;;;;kCAGD,qKAAC,oIAAA,CAAA,UAAY;wBACT,kBAAkB;wBAClB,qBAAqB;wBACrB,SAAS;wBACT,YAAY;wBACZ,cAAc;;;;;;;;;;;;0BAGtB,qKAAC,uLAAA,CAAA,QAAK;gBAAC,IAAI;oBAAE,WAAW;oBAAG,SAAS;gBAAE;;kCAClC,qKAAC,kNAAA,CAAA,iBAAc;kCACX,cAAA,qKAAC,uLAAA,CAAA,QAAK;4BACF,IAAI;gCAAE,UAAU;4BAAI;4BACpB,mBAAgB;4BAChB,MAAM;;8CAEN,qKAAC;oCACG,aAAa,SAAS,MAAM;oCAC5B,OAAO;oCACP,SAAS;oCACT,kBAAkB;oCAClB,eAAe;oCACf,UAAU;;;;;;8CAEd,qKAAC,mMAAA,CAAA,YAAS;8CACL,YAAY,GAAG,CAAC,CAAC,MAAM;wCACpB,MAAM,iBAAiB,SAAS,QAAQ,CAAC,KAAK,EAAE;wCAChD,qBACI,qKAAC,gMAAA,CAAA,WAAQ;4CACL,KAAK;4CACL,SAAS,CAAC,QAAU,YAAY,OAAO,KAAK,EAAE;4CAC9C,MAAK;4CACL,gBAAc;4CACd,UAAU,CAAC;4CAEX,UAAU;4CACV,IAAI;gDAAE,QAAQ;4CAAU;;8DAExB,qKAAC,mMAAA,CAAA,YAAS;oDAAC,SAAQ;8DACf,cAAA,qKAAC,gMAAA,CAAA,WAAQ;wDACL,OAAM;wDACN,SAAS;;;;;;;;;;;8DAMjB,qKAAC,mMAAA,CAAA,YAAS;oDACN,WAAU;oDACV,IAAI,KAAK,KAAK;oDACd,OAAM;oDACN,SAAQ;8DAEP,KAAK,KAAK;;;;;;8DAEf,qKAAC,mMAAA,CAAA,YAAS;oDAAC,OAAM;8DAAQ,KAAK,WAAW;;;;;;8DACzC,qKAAC,mMAAA,CAAA,YAAS;oDAAC,OAAM;8DAAQ,KAAK,MAAM;;;;;;8DACpC,qKAAC,mMAAA,CAAA,YAAS;oDAAC,OAAM;8DAAQ,KAAK,QAAQ;;;;;;8DACtC,qKAAC,mMAAA,CAAA,YAAS;oDAAC,OAAM;8DAAQ,KAAK,IAAI;;;;;;8DAClC,qKAAC,mMAAA,CAAA,YAAS;oDAAC,OAAM;8DAAQ,KAAK,OAAO;;;;;;8DACrC,qKAAC,mMAAA,CAAA,YAAS;oDAAC,OAAM;8DAAQ,KAAK,SAAS;;;;;;;2CA1BlC;;;;;oCA6BjB;;;;;;;;;;;;;;;;;kCAIZ,qKAAC,qNAAA,CAAA,kBAAe;wBACZ,oBAAoB;4BAAC;4BAAG;4BAAI;yBAAG;wBAC/B,WAAU;wBACV,OAAO,MAAM,MAAM;wBACnB,aAAa;wBACb,MAAM;wBACN,cAAc;wBACd,qBAAqB;;;;;;;;;;;;;;AAgCzC","debugId":null}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/task-management-dashboard/src/pages/index.tsx"],"sourcesContent":["// import Head from \"next/head\";\n// import Image from \"next/image\";\nimport TodoAppMainPage from \"@/components/TodoAppMainPage\";\n\nexport type Task = {\n  id: number,\n  name: string,\n  time: string,\n  title: string,\n  description: string,\n  status: string,\n  priority: string,\n  dueDate: string,\n  tags: string,\n  createdAt: string;\n}\n\nexport type Props = {\n  task: Task[]\n}\n\nconst Home: React.FC<Props> = ({task}) => {\n  return (\n    <TodoAppMainPage task={task}/>\n  );\n}\n\nexport const getServerSideProps = async () => {\n  const res = await fetch('http://localhost:3000/api/task');\n  const task: Task = await res.json();\n\n  return {\n      props: { task, },\n  }\n}\n\nexport default Home"],"names":[],"mappings":"AAAA,gCAAgC;AAChC,kCAAkC;;;;;;AAClC;;;AAmBA,MAAM,OAAwB,CAAC,EAAC,IAAI,EAAC;IACnC,qBACE,qKAAC,8HAAA,CAAA,UAAe;QAAC,MAAM;;;;;;AAE3B;AAEO,MAAM,qBAAqB;IAChC,MAAM,MAAM,MAAM,MAAM;IACxB,MAAM,OAAa,MAAM,IAAI,IAAI;IAEjC,OAAO;QACH,OAAO;YAAE;QAAM;IACnB;AACF;uCAEe","debugId":null}}]
}