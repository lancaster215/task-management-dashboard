{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/to-do-app/src/components/styles.ts"],"sourcesContent":["const styles = {\r\n    formBox: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: '16px',\r\n        marginTop: '16px',\r\n        backgroundColor: 'background.paper',\r\n        padding: '24px',\r\n        borderRadius: '8px',\r\n        boxShadow: 24,\r\n        width: '400px',\r\n    }, \r\n}\r\n\r\nexport default styles;"],"names":[],"mappings":";;;AAAA,MAAM,SAAS;IACX,SAAS;QACL,SAAS;QACT,eAAe;QACf,KAAK;QACL,WAAW;QACX,iBAAiB;QACjB,SAAS;QACT,cAAc;QACd,WAAW;QACX,OAAO;IACX;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/to-do-app/src/components/TodoAppMainPage.tsx"],"sourcesContent":["import { Props, Task } from \"@/pages\";\r\nimport { Box, Button, MenuItem, Modal, Select, TextField, Typography } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport styles from \"./styles\";\r\n\r\n\r\nexport default function TodoAppMainPage({task: initialTasks}: Props) {\r\n    const [tasks, setTasks] = useState<Task[]>(initialTasks)\r\n    const [newTask, setNewTask] = useState({\r\n        title: '',\r\n        description: '',\r\n        status: '',\r\n        priority: '',\r\n        dueDate: '',\r\n    });\r\n    const [editingId, setEditingId] = useState<number | null>(null);\r\n    const [editedTaskName, setEditedTaskName] = useState('');\r\n    const [openAddTaskModal, setOpenAddTaskModal] = useState(false);\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const res = await fetch('/api/addTask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": 'application/json'\r\n                },\r\n                body: JSON.stringify({ \r\n                    title: newTask.title, \r\n                    description: newTask.description, \r\n                    status: newTask.status, \r\n                    priority: newTask.priority, \r\n                    dueDate: newTask.dueDate \r\n                })\r\n            })\r\n\r\n            if(res.ok) {\r\n                const newTasks = await fetch('/api/task').then(r => r.json());\r\n                setTasks(newTasks);\r\n                setNewTask({ \r\n                    title: '', \r\n                    description: '', \r\n                    dueDate: '',\r\n                    status: '',\r\n                    priority: '',\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error in adding task: ${err}`)\r\n        }\r\n    }\r\n\r\n    const handleDone = async(id: number) => {\r\n        try {\r\n            const res = await fetch('/api/removeTask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": 'application/json'\r\n                },\r\n                body: JSON.stringify({ id })\r\n            })\r\n\r\n            if(res.ok) {\r\n                const newTasks = await fetch('/api/task').then(r => r.json());\r\n                setTasks(newTasks);\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error in removing task: ${err}`)\r\n        }\r\n    }\r\n    \r\n    const handleEdit = (id: number) => {\r\n        const taskToEdit = tasks.find((task) => task.id === id);\r\n        if(taskToEdit) {\r\n            setEditingId(id);\r\n            setEditedTaskName(taskToEdit.name)\r\n        }\r\n    }\r\n\r\n    const handleSaveEdit = async (id: number) => {\r\n        try {\r\n            const res = await fetch('/api/editTask', {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ id, name: editedTaskName })\r\n            })\r\n\r\n            if(res.ok) {\r\n                const newTasks = await fetch('/api/task').then(r => r.json());\r\n                setTasks(newTasks);\r\n            }\r\n        } catch (err) {\r\n            console.error(`Error in updating task: ${err}`)\r\n        }\r\n        \r\n        setEditingId(null);\r\n        setEditedTaskName('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Typography variant=\"h3\"> Tasks: </Typography>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    onClick={() => setOpenAddTaskModal(!openAddTaskModal)}\r\n                >\r\n                    Add Task\r\n                </Button>\r\n                <Modal\r\n                    open={openAddTaskModal}\r\n                    onClose={() => setOpenAddTaskModal(!openAddTaskModal)}\r\n                    aria-labelledby=\"modal-modal-title\"\r\n                    aria-describedby=\"modal-modal-description\"\r\n                >\r\n                    <Box\r\n                        component=\"form\"\r\n                        onSubmit={handleSubmit}\r\n                        sx={styles.formBox}\r\n                    >\r\n                        <Typography variant=\"h5\" color=\"black\"> Add New Task </Typography>\r\n                        <TextField\r\n                            label=\"Task title\"\r\n                            name=\"title\"\r\n                            value={newTask.title}\r\n                            onChange={(e) => setNewTask(prev => ({...prev, title: e.target.value}))}\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                        <TextField\r\n                            label=\"Describe your task\"\r\n                            name=\"description\"\r\n                            value={newTask.description}\r\n                            onChange={(e) => setNewTask(prev => ({...prev, description: e.target.value}))}\r\n                            fullWidth\r\n                            required\r\n                        />\r\n                        <TextField\r\n                            label=\"Due date\"\r\n                            name=\"dueDate\"\r\n                            value={newTask.dueDate}\r\n                            onChange={(e) => setNewTask(prev => ({...prev, dueDate: e.target.value}))}\r\n                            fullWidth\r\n                            required\r\n                            type=\"date\"\r\n                        />\r\n                        <Select\r\n                            labelId=\"role-label\"\r\n                            id=\"role\"\r\n                            value={newTask.status}\r\n                            label=\"Select Priority\"\r\n                            onChange={(e) => setNewTask(prev => ({...prev, priority: e.target.value}))}\r\n                        >\r\n                            <MenuItem value=\"low\">Low</MenuItem>\r\n                            <MenuItem value=\"medium\">Medium</MenuItem>\r\n                            <MenuItem value=\"hihg\">High</MenuItem>\r\n                        </Select>\r\n                        <Select\r\n                            labelId=\"role-label\"\r\n                            id=\"role\"\r\n                            value={newTask.status}\r\n                            label=\"Select Status\"\r\n                            onChange={(e) => setNewTask(prev => ({...prev, status: e.target.value}))}\r\n                        >\r\n                            <MenuItem value=\"todo\">Todo</MenuItem>\r\n                            <MenuItem value=\"inProgress\">In-Progress</MenuItem>\r\n                            <MenuItem value=\"done\">Done</MenuItem>\r\n                        </Select>\r\n                    </Box>\r\n                </Modal>\r\n                \r\n                {/* <form onSubmit={handleSubmit}>\r\n                    <input \r\n                        placeholder=\"Enter Task title\" \r\n                        type=\"text\"\r\n                        value={newTask.title} \r\n                        onChange={(e) => setNewTask(prev => ({...prev, title: e.target.value}))}\r\n                        required\r\n                    />\r\n                    <input \r\n                        placeholder=\"Describe your task\"\r\n                        type=\"text\"\r\n                        value={newTask.description}\r\n                        onChange={(e) => setNewTask(prev => ({...prev, description: e.target.value}))}\r\n                        required\r\n                    />\r\n                    <input\r\n                        placeholder=\"Due Date\"\r\n                        type=\"date\"\r\n                        value={newTask.dueDate}\r\n                        onChange={(e) => setNewTask(prev => ({...prev, dueDate: e.target.value}))}\r\n                        required\r\n                    />\r\n                    <input\r\n                        placeholder=\"Due Date\"\r\n                        type=\"date\"\r\n                        value={newTask.dueDate}\r\n                        onChange={(e) => setNewTask(prev => ({...prev, dueDate: e.target.value}))}\r\n                        required\r\n                    />\r\n                    <button type=\"submit\"> Add Task </button>\r\n                </form> */}\r\n            </div>\r\n            <ul>\r\n                {tasks.map((ta) => \r\n                    ta.id === editingId ? \r\n                    (\r\n                        <li key={ta.id}>\r\n                            <input\r\n                                value={editedTaskName}\r\n                                type=\"text\"\r\n                                onChange={(e) => setEditedTaskName(e.target.value)}\r\n                            />\r\n                            <button onClick={() => handleSaveEdit(ta.id)}>Save</button>\r\n                            <button onClick={() =>  setEditingId(null)}>Cancel</button>\r\n                        </li>\r\n                    )\r\n                    :\r\n                    (\r\n                        <li key={ta.id}>\r\n                            {ta.title} \r\n                            {ta.description}\r\n                            <button onClick={() => handleDone(ta.id)}>Done</button>\r\n                            <button onClick={() => handleEdit(ta.id)}>Edit</button>\r\n                        </li>\r\n                    )\r\n                )}\r\n            </ul>\r\n        </>\r\n    )\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Francisco%20Ifurung/Desktop/to-do-app/src/pages/index.tsx"],"sourcesContent":["// import Head from \"next/head\";\n// import Image from \"next/image\";\nimport TodoAppMainPage from \"@/components/TodoAppMainPage\";\n\nexport type Task = {\n  id: number,\n  name: string,\n  time: string,\n  title: string,\n  description: string\n}\n\nexport type Props = {\n  task: Task[]\n}\n\nconst Home: React.FC<Props> = ({task}) => {\n  return (\n    <TodoAppMainPage task={task}/>\n  );\n}\n\nexport const getServerSideProps = async () => {\n  const res = await fetch('http://localhost:3000/api/task');\n  const task: Task = await res.json();\n\n  return {\n      props: { task, },\n  }\n}\n\nexport default Home"],"names":[],"mappings":"AAAA,gCAAgC;AAChC,kCAAkC;;;;;;AAClC;;;AAcA,MAAM,OAAwB,CAAC,EAAC,IAAI,EAAC;IACnC,qBACE,qKAAC,8HAAA,CAAA,UAAe;QAAC,MAAM;;;;;;AAE3B;AAEO,MAAM,qBAAqB;IAChC,MAAM,MAAM,MAAM,MAAM;IACxB,MAAM,OAAa,MAAM,IAAI,IAAI;IAEjC,OAAO;QACH,OAAO;YAAE;QAAM;IACnB;AACF;uCAEe","debugId":null}}]
}